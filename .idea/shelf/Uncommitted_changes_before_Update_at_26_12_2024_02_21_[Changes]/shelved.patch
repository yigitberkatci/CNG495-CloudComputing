Index: Backend/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, jsonify, request, session\r\nfrom db_config import get_db_connection\r\nfrom hashlib import sha256\r\nfrom flask_cors import CORS\r\nfrom datetime import datetime\r\nfrom AmazonSES.emailService import emailService\r\n\r\n#Session configuration\r\napp = Flask(__name__)\r\nCORS(app)\r\n\r\n@app.route('/')\r\ndef index():\r\n    return \"SoccerMatch Scheduler API is running!\"\r\n\r\n@app.route('/timeslot', methods=['GET'])\r\ndef get_timeslot():\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)  #data as dictionary\r\n\r\n        query = \"\"\"\r\n                SELECT \r\n                    TIME_FORMAT(ts.StartTime, '%H:%i:%s') AS StartTime,\r\n                    TIME_FORMAT(ts.EndTime, '%H:%i:%s') AS EndTime,\r\n                    ts.IsBooked,\r\n                    t1.Name AS Team1Name,\r\n                    t2.Name AS Team2Name\r\n                FROM TimeSlot ts\r\n                LEFT JOIN SoccerMatch sm ON ts.MatchID = sm.MatchID\r\n                LEFT JOIN Team t1 ON sm.Team1ID = t1.TeamID\r\n                LEFT JOIN Team t2 ON sm.Team2ID = t2.TeamID\r\n                WHERE ts.Date = CURDATE() -- Only for today's date\r\n                ORDER BY ts.StartTime;\r\n                \"\"\"\r\n        cursor.execute(query)\r\n        timeslots = cursor.fetchall()\r\n\r\n\r\n        cursor.close()\r\n        connection.close()\r\n\r\n        return jsonify({\"success\": True, \"data\": timeslots}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\n@app.route('/login', methods=['POST'])\r\ndef login():\r\n    try:\r\n        data = request.get_json()\r\n        email = data.get('email')\r\n        password = data.get('password')\r\n\r\n        if not email or not password:\r\n            return jsonify({\"success\": False, \"message\": \"Email and password are required\"}), 400\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"SELECT Password FROM Team WHERE Email = %s\"\r\n        cursor.execute(query, (email,))\r\n        user = cursor.fetchone()\r\n\r\n        cursor.close()\r\n        connection.close()\r\n\r\n        if not user:\r\n            return jsonify({\"success\": False, \"message\": \"Invalid email or password\"}), 401\r\n\r\n        #hashing using SHA256\r\n        hashed_password = sha256(password.encode('utf-8')).hexdigest()\r\n\r\n        #password verify\r\n        if hashed_password != user['Password']:\r\n            return jsonify({\"success\": False, \"message\": \"Invalid email or password\"}), 401\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Login successful\"}), 200\r\n\r\n    except Exception as e:\r\n        print(f\"Error occurred: {e}\")\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\n@app.route('/register', methods=['POST'])\r\ndef register():\r\n    try:\r\n        data = request.get_json()\r\n        team_name = data.get('team_name')\r\n        email = data.get('email')\r\n        password = data.get('password')\r\n\r\n        if not team_name or not email or not password:\r\n            return jsonify({\"success\": False, \"message\": \"Team name, email, and password are required\"}), 400\r\n\r\n        #hash with SHA256\r\n        hashed_password = sha256(password.encode('utf-8')).hexdigest()\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        query = \"SELECT * FROM Team WHERE Email = %s\"\r\n        cursor.execute(query, (email,))\r\n        existing_user = cursor.fetchone()\r\n\r\n        if existing_user:\r\n            return jsonify({\"success\": False, \"message\": \"Email already exists\"}), 409\r\n\r\n        query = \"INSERT INTO Team (Name, Email, Password) VALUES (%s, %s, %s)\"\r\n        cursor.execute(query, (team_name, email, hashed_password))\r\n        connection.commit()\r\n\r\n        cursor.close()\r\n        connection.close()\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Registration successful\"}), 201\r\n\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\n@app.route('/rankings', methods=['GET'])\r\ndef get_rankings():\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"\"\"\r\n        SELECT \r\n            t.Name AS Club,\r\n            COUNT(sm.MatchID) AS Played,\r\n            SUM(CASE WHEN sm.Score1 > sm.Score2 AND sm.Team1ID = t.TeamID THEN 1\r\n                     WHEN sm.Score2 > sm.Score1 AND sm.Team2ID = t.TeamID THEN 1\r\n                     ELSE 0 END) AS Won,\r\n            SUM(CASE WHEN sm.Score1 < sm.Score2 AND sm.Team1ID = t.TeamID THEN 1\r\n                     WHEN sm.Score2 < sm.Score1 AND sm.Team2ID = t.TeamID THEN 1\r\n                     ELSE 0 END) AS Lost,\r\n            SUM(CASE WHEN sm.Score1 = sm.Score2 THEN 1 ELSE 0 END) AS Drawn,\r\n            SUM(CASE WHEN sm.Team1ID = t.TeamID THEN sm.Score1\r\n                     WHEN sm.Team2ID = t.TeamID THEN sm.Score2\r\n                     ELSE 0 END) AS GF, -- Goals For\r\n            SUM(CASE WHEN sm.Team1ID = t.TeamID THEN sm.Score2\r\n                     WHEN sm.Team2ID = t.TeamID THEN sm.Score1\r\n                     ELSE 0 END) AS GA, -- Goals Against\r\n            CONCAT(ROUND(\r\n                SUM(CASE WHEN sm.Score1 > sm.Score2 AND sm.Team1ID = t.TeamID THEN 1\r\n                         WHEN sm.Score2 > sm.Score1 AND sm.Team2ID = t.TeamID THEN 1\r\n                         ELSE 0 END) * 100.0 / COUNT(sm.MatchID), 2), '%') AS `Win %`\r\n        FROM Team t\r\n        LEFT JOIN SoccerMatch sm\r\n        ON t.TeamID = sm.Team1ID OR t.TeamID = sm.Team2ID\r\n        GROUP BY t.TeamID\r\n        ORDER BY Played DESC, `Win %` DESC;\r\n        \"\"\"\r\n        cursor.execute(query)\r\n        rankings = cursor.fetchall()\r\n\r\n        cursor.close()\r\n        connection.close()\r\n\r\n        return jsonify({\"success\": True, \"data\": rankings}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n@app.route(\"/booking\", methods=['POST'])\r\ndef booking():\r\n    service = emailService()\r\n    try:\r\n        data = request.get_json()\r\n        team1email = data.get('team1')\r\n        team2 = data.get('team2')\r\n        timeslot = data.get('timeslot')\r\n        start_time, end_time = [time.strip() for time in timeslot.split('-')]\r\n\r\n        now = datetime.now()\r\n\r\n        # Format the date and time\r\n        date = now.strftime(\"%Y-%m-%d\")  # Only the date\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        # Get team name of logged in team\r\n        query = \"SELECT TeamID, Name FROM Team WHERE Email = %s\"\r\n        cursor.execute(query, (team1email,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            team1ID = result[0]\r\n            team1 = result[1]\r\n        else:\r\n            return jsonify({\"success\": False, \"error\": \"Team1 not found\"}), 400\r\n\r\n        match_details = {\r\n            \"date\": date,\r\n            \"time\": timeslot,\r\n            \"team1\": team1,\r\n            \"team2\": team2  # Optional for generalRequest\r\n        }\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        type = \"specialRequest\"\r\n        msg = f\"Team {team1} wants to play a match with your team!\"\r\n\r\n        # Get ID of second team\r\n\r\n        query = \"SELECT TeamID FROM Team WHERE Name = %s\"\r\n        cursor.execute(query, (team2,))\r\n        team2ID = cursor.fetchone()\r\n        if team2ID:\r\n            team2ID = team2ID[0]  # Extract value from tuple\r\n        else:\r\n            return jsonify({\"success\": False, \"error\": \"Team2 not found\"}), 400\r\n\r\n        # Get TimeSlot ID\r\n        query = \"SELECT TimeSlotID FROM TimeSlot WHERE StartTime = %s\"\r\n        cursor.execute(query, (start_time,))\r\n        timeslotID = cursor.fetchone()\r\n        if timeslotID:\r\n            timeslotID = timeslotID[0]  # Extract value from tuple\r\n        else:\r\n            return jsonify({\"success\": False, \"error\": \"Timeslot not found\"}), 400\r\n\r\n        # Get email of team2\r\n        query = \"SELECT Email FROM Team WHERE Name = %s\"\r\n        cursor.execute(query, (team2,))\r\n        receiverEmail = cursor.fetchone()\r\n        if receiverEmail:\r\n            receiverEmail = receiverEmail[0]  # Extract email value\r\n        else:\r\n            return jsonify({\"success\": False, \"error\": \"Receiver email not found\"}), 400\r\n\r\n        # Send the email to the specific team\r\n        service.sendMessage(type, receiverEmail, match_details)\r\n\r\n        # Insert into Match table\r\n        query = \"INSERT INTO SoccerMatch (Team1ID, Team2ID, Score1, Score2) VALUES (%s, %s, 0, 0)\"\r\n        cursor.execute(query, (team1ID, team2ID))\r\n        lastmatchID = cursor.lastrowid\r\n\r\n        # Update timeSlot Table\r\n        query = \"UPDATE TimeSlot SET IsBooked = TRUE, MatchID = %s WHERE TimeSlotID = %s\"\r\n        cursor.execute(query, (lastmatchID, timeslotID))\r\n\r\n        # Insert into Notification table\r\n        query = \"INSERT INTO Notification (SenderID, ReceiverID, TimeSlotID, Message, Date, NotificationType) VALUES (%s, %s, %s, %s, %s, %s)\"\r\n        values = (team1ID, team2ID, timeslotID, msg, datetime.now(), type)\r\n\r\n        # Execute the final insert query\r\n        cursor.execute(query, values)\r\n        connection.commit()\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Booking successful\"}), 201\r\n\r\n    except Exception as e:\r\n        print(f\"Error occurred: {e}\")\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        cursor.close()\r\n        connection.close()\r\n\r\n@app.route('/looking-opponents', methods=['POST'])\r\ndef looking_opponents():\r\n    try:\r\n        data = request.get_json()\r\n        team = data['team']\r\n\r\n        match_details ={\r\n            \"team\": team\r\n        }\r\n        service = emailService()\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        type = \"generalRequest\"\r\n        msg = f\"Team {team} is looking for opponents!\"\r\n\r\n        # Get ID of team1\r\n        query = \"SELECT TeamID FROM Team WHERE Name = %s\"\r\n        cursor.execute(query, (team,))\r\n        team1ID = cursor.fetchone()\r\n        if team1ID:\r\n            team1ID = team1ID[0]  # Extract value from tuple\r\n        else:\r\n            return jsonify({\"success\": False, \"error\": \"Team1 not found\"}), 400\r\n\r\n\r\n        # Get all email addresses\r\n        query2 = \"SELECT Email FROM Team\"\r\n        cursor.execute(query2)\r\n        receiverEmails = [email[0] for email in cursor.fetchall()]  # Extract emails as a list\r\n\r\n        # Send the email to all teams\r\n        for receiverEmail in receiverEmails:\r\n            service.sendMessage(type, receiverEmail, match_details)\r\n\r\n        # Insert into Notification table\r\n        query = \"INSERT INTO Notification (SenderID, Message, Date, NotificationType) VALUES (%s, %s, %s, %s)\"\r\n        values = (team1ID, msg, datetime.now(), type)\r\n\r\n        cursor.execute(query, values)\r\n        connection.commit()\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Looking for opponents successful\"}), 201\r\n\r\n    except Exception as e:\r\n        print(f\"Error occurred: {e}\")\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        cursor.close()\r\n        connection.close()\r\n\r\n\r\n@app.route('/api/teams-asking-for-match', methods=['GET'])\r\ndef get_teams_asking_for_match():\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"SELECT Name FROM Team WHERE isAskingForMatch = TRUE\"\r\n        cursor.execute(query)\r\n        teams = cursor.fetchall()\r\n        cursor.close()\r\n        connection.close()\r\n\r\n        return jsonify({\"success\": True, \"data\": teams}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\n@app.route('/ask-for-match', methods=['POST'])\r\ndef ask_for_match():\r\n    try:\r\n        # Get the email from the request data\r\n        data = request.get_json()\r\n        email = data.get('email')\r\n\r\n        if not email:\r\n            return jsonify({\"success\": False, \"message\": \"Email is required\"}), 400\r\n\r\n        # Connect to the database\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n        service = emailService()\r\n\r\n        # Get ID of team1\r\n        query = \"SELECT TeamID, Name FROM Team WHERE Email = %s\"\r\n        cursor.execute(query, (email,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            team1ID = result[0]\r\n            team = result[1]\r\n        else:\r\n            return jsonify({\"success\": False, \"error\": \"Team1 not found\"}), 400\r\n\r\n        match_details = {\r\n            \"team\": team\r\n        }\r\n\r\n        type = \"generalRequest\"\r\n        msg = f\"Team {team} is looking for opponents!\"\r\n\r\n\r\n        # Get all email addresses\r\n        query2 = \"SELECT Email FROM Team\"\r\n        cursor.execute(query2)\r\n        receiverEmails = [emails[0] for emails in cursor.fetchall()]  # Extract emails as a list\r\n\r\n        # Send the email to all teams\r\n        for receiverEmail in receiverEmails:\r\n            service.sendMessage(type, receiverEmail, match_details)\r\n\r\n        # Insert into Notification table\r\n        query = \"INSERT INTO Notification (SenderID, Message, Date, NotificationType) VALUES (%s, %s, %s, %s)\"\r\n        values = (team1ID, msg, datetime.now(), type)\r\n\r\n        cursor.execute(query, values)\r\n\r\n        # Update the isAskingForMatch value to TRUE for the team with the given email\r\n        query = \"UPDATE Team SET isAskingForMatch = TRUE WHERE Email = %s\"\r\n        cursor.execute(query, (email,))\r\n\r\n        # Check if any rows were updated\r\n        if cursor.rowcount == 0:\r\n            return jsonify({\"success\": False, \"message\": \"Team not found\"}), 404\r\n\r\n        # Commit the changes\r\n        connection.commit()\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Team is now asking for a match\"}), 200\r\n\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\n    finally:\r\n        # Ensure resources are released\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n@app.route('/stop-asking-for-match', methods=['POST'])\r\ndef stop_asking_for_match():\r\n    try:\r\n        # Get the email from the request data\r\n        data = request.get_json()\r\n        email = data.get('email')\r\n\r\n        if not email:\r\n            return jsonify({\"success\": False, \"message\": \"Email is required\"}), 400\r\n\r\n        # Connect to the database\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        # Update the isAskingForMatch value to FALSE for the team with the given email\r\n        query = \"UPDATE Team SET isAskingForMatch = FALSE WHERE Email = %s\"\r\n        cursor.execute(query, (email,))\r\n\r\n        # Check if any rows were updated\r\n        if cursor.rowcount == 0:\r\n            return jsonify({\"success\": False, \"message\": \"Team not found\"}), 404\r\n\r\n        # Commit the changes\r\n        connection.commit()\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Team is no longer asking for a match\"}), 200\r\n\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\n    finally:\r\n        # Ensure resources are released\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n#Admin Panel\r\n# 1. Load Teams\r\n@app.route('/api/teams', methods=['GET'])\r\ndef get_teams():\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"SELECT TeamID, Name, Email FROM Team\"\r\n        cursor.execute(query)\r\n        teams = cursor.fetchall()\r\n\r\n        return jsonify({\"success\": True, \"data\": teams}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n# 2. Delete a Team\r\n@app.route('/api/teams/<int:team_id>', methods=['DELETE'])\r\ndef delete_team(team_id):\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        query = \"DELETE FROM Team WHERE TeamID = %s\"\r\n        cursor.execute(query, (team_id,))\r\n        connection.commit()\r\n\r\n        if cursor.rowcount == 0:\r\n            return jsonify({\"success\": False, \"message\": \"Team not found\"}), 404\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Team deleted successfully\"}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n# 3. Edit a Team\r\n@app.route('/api/teams/<int:team_id>', methods=['PUT'])\r\ndef update_team(team_id):\r\n    try:\r\n        data = request.get_json()\r\n        name = data.get('name')\r\n        email = data.get('email')\r\n\r\n        if not name or not email:\r\n            return jsonify({\"success\": False, \"message\": \"Name and email are required\"}), 400\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        query = \"UPDATE Team SET Name = %s, Email = %s WHERE TeamID = %s\"\r\n        cursor.execute(query, (name, email, team_id))\r\n        connection.commit()\r\n\r\n        if cursor.rowcount == 0:\r\n            return jsonify({\"success\": False, \"message\": \"Team not found\"}), 404\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Team updated successfully\"}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n# 4. Load Match Scores\r\n@app.route('/api/matches', methods=['GET'])\r\ndef get_matches():\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"\"\"\r\n            SELECT \r\n                sm.MatchID,\r\n                t1.Name AS Team1Name,\r\n                t2.Name AS Team2Name,\r\n                sm.Score1,\r\n                sm.Score2\r\n            FROM SoccerMatch sm\r\n            JOIN Team t1 ON sm.Team1ID = t1.TeamID\r\n            JOIN Team t2 ON sm.Team2ID = t2.TeamID\r\n        \"\"\"\r\n        cursor.execute(query)\r\n        matches = cursor.fetchall()\r\n\r\n        return jsonify({\"success\": True, \"data\": matches}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n# 5. Update Match Scores\r\n@app.route('/api/matches/<int:match_id>', methods=['PUT'])\r\ndef update_match_score(match_id):\r\n    try:\r\n        data = request.get_json()\r\n        score1 = data.get('score1')\r\n        score2 = data.get('score2')\r\n\r\n        if score1 is None or score2 is None:\r\n            return jsonify({\"success\": False, \"message\": \"Both scores are required\"}), 400\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        query = \"UPDATE SoccerMatch SET Score1 = %s, Score2 = %s WHERE MatchID = %s\"\r\n        cursor.execute(query, (score1, score2, match_id))\r\n        connection.commit()\r\n\r\n        if cursor.rowcount == 0:\r\n            return jsonify({\"success\": False, \"message\": \"Match not found\"}), 404\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Scores updated successfully\"}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n# 6. Load Timeslots\r\n@app.route('/api/timeslots', methods=['GET'])\r\ndef get_timeslots():\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"\"\"\r\n                    SELECT \r\n                        TimeSlotID,\r\n                        TIME_FORMAT(StartTime, '%H:%i:%s') AS StartTime,\r\n                        TIME_FORMAT(EndTime, '%H:%i:%s') AS EndTime,\r\n                        IsBooked\r\n                    FROM TimeSlot\r\n                \"\"\"\r\n        cursor.execute(query)\r\n        timeslots = cursor.fetchall()\r\n\r\n        return jsonify({\"success\": True, \"data\": timeslots}), 200\r\n    except Exception as e:\r\n        print(e)\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n# 7. Delete Timeslot\r\n@app.route('/api/timeslots/<int:timeslot_id>', methods=['DELETE'])\r\ndef delete_timeslot(timeslot_id):\r\n    try:\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor()\r\n\r\n        query = \"DELETE FROM TimeSlot WHERE TimeSlotID = %s\"\r\n        cursor.execute(query, (timeslot_id,))\r\n        connection.commit()\r\n\r\n        if cursor.rowcount == 0:\r\n            return jsonify({\"success\": False, \"message\": \"Timeslot not found\"}), 404\r\n\r\n        return jsonify({\"success\": True, \"message\": \"Timeslot deleted successfully\"}), 200\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n    finally:\r\n        if 'cursor' in locals():\r\n            cursor.close()\r\n        if 'connection' in locals():\r\n            connection.close()\r\n\r\n@app.route('/api/myteam', methods=['POST'])\r\ndef get_my_team():\r\n    try:\r\n        data = request.get_json()\r\n        user_email = data.get('email')\r\n\r\n        if not user_email:\r\n            return jsonify({\"success\": False, \"message\": \"User not logged in\"}), 401\r\n\r\n        connection = get_db_connection()\r\n        cursor = connection.cursor(dictionary=True)\r\n\r\n        query = \"SELECT Name, Email, Ranking, CreationDate FROM Team WHERE Email = %s\"\r\n        cursor.execute(query, (user_email,))\r\n        team = cursor.fetchone()\r\n\r\n        cursor.close()\r\n        connection.close()\r\n\r\n        if not team:\r\n            return jsonify({\"success\": False, \"message\": \"Team not found\"}), 404\r\n\r\n        return jsonify({\"success\": True, \"data\": team}), 200\r\n\r\n    except Exception as e:\r\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='0.0.0.0', port=5000)\r\n\r\n#MyTeam page\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/app.py b/Backend/app.py
--- a/Backend/app.py	(revision 5a9865f7ddf5188ede93dcd0cdf4cd17206e99cc)
+++ b/Backend/app.py	(date 1735168640506)
@@ -255,7 +255,7 @@
     finally:
         cursor.close()
         connection.close()
-
+"""
 @app.route('/looking-opponents', methods=['POST'])
 def looking_opponents():
     try:
@@ -307,7 +307,7 @@
         cursor.close()
         connection.close()
 
-
+"""
 @app.route('/api/teams-asking-for-match', methods=['GET'])
 def get_teams_asking_for_match():
     try:
@@ -356,7 +356,6 @@
         type = "generalRequest"
         msg = f"Team {team} is looking for opponents!"
 
-
         # Get all email addresses
         query2 = "SELECT Email FROM Team"
         cursor.execute(query2)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"65369a6a-bed1-458d-be00-143af3760ec2\" name=\"Changes\" comment=\"Trigger added for ranking\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Backend/app.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Backend/app.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform)); sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo, NoAppException&#10;for module in [&quot;main.py&quot;, &quot;wsgi.py&quot;, &quot;app.py&quot;]:&#10;    try: locals().update(ScriptInfo(app_import_path=module, create_app=None).load_app().make_shell_context()); print(&quot;\\nFlask App: %s&quot; % app.import_name); break&#10;    except NoAppException: pass\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform)); sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo, NoAppException&#10;for module in [&quot;main.py&quot;, &quot;wsgi.py&quot;, &quot;app.py&quot;]:&#10;    try: locals().update(ScriptInfo(app_import_path=module, create_app=None).load_app().make_shell_context()); print(&quot;\\nFlask App: %s&quot; % app.import_name); break&#10;    except NoAppException: pass\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {}\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/yigitberkatci/CNG495-CloudComputing.git&quot;,\r\n    &quot;accountId&quot;: &quot;b975ea3d-28a8-4fe7-ac95-a12c78398db0&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2pf90NbvnX1xWDoxwA5usHBIv0S\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;JavaScript Debug.register.html.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.sourceCode.Python&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\ilgin\\odtü\\cng495\\CNG495-CloudComputing\\Frontend\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-e768b9ed790e-JavaScript-PY-243.21565.199\" />\r\n        <option value=\"bundled-python-sdk-cab1f2013843-4ae2d6a61b08-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.21565.199\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"65369a6a-bed1-458d-be00-143af3760ec2\" name=\"Changes\" comment=\"\" />\r\n      <created>1733146039083</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1733146039083</updated>\r\n      <workItem from=\"1733146040340\" duration=\"5158000\" />\r\n      <workItem from=\"1733154507331\" duration=\"3709000\" />\r\n      <workItem from=\"1733240190863\" duration=\"2485000\" />\r\n      <workItem from=\"1733250357513\" duration=\"3914000\" />\r\n      <workItem from=\"1733325934171\" duration=\"16000\" />\r\n      <workItem from=\"1734509968905\" duration=\"2190000\" />\r\n      <workItem from=\"1734522530403\" duration=\"674000\" />\r\n      <workItem from=\"1734612642480\" duration=\"1988000\" />\r\n      <workItem from=\"1734614647024\" duration=\"3524000\" />\r\n      <workItem from=\"1734964159019\" duration=\"7918000\" />\r\n      <workItem from=\"1734980009707\" duration=\"3123000\" />\r\n      <workItem from=\"1735040775010\" duration=\"24543000\" />\r\n      <workItem from=\"1735134543461\" duration=\"1959000\" />\r\n      <workItem from=\"1735159138607\" duration=\"7604000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Connection codes for Flask connection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733150564866</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733150564866</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Frontend directory/folder creation\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733154236433</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733154236433</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Backend first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733154652370</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733154652370</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Backend first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733254784208</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733254784208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"README update and SQL file added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733254893773</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733254893773</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"README update and Reports added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734510550139</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734510550139</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Changes is database structure and booking operation added (notification trigger not included)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734618772396</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734618772396</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Get Teams Asking For Match updated\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734980314440</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734980314440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Timeslot table Frontend and Backend connection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735054291497</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735054291497</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Team Information Page added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735056601109</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735056601109</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Find Opponent Backend implementation and Booking correction\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735070806003</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735070806003</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"-\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735071211273</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735071211273</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Correction (PopUp)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735075286445</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735075286445</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Booking connection done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735082426135</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735082426135</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Asking for opponent and not asking for opponent done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735082982236</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735082982236</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Admin panel Backend\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735084153062</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735084153062</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"DB Event added. emailService updated. backend fix (not tested)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735162695758</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735162695758</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"MyTeam button fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735163579377</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735163579377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Trigger added for ranking\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1735166986675</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1735166986675</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"20\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"main\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"Connection codes for Flask connection\" />\r\n    <MESSAGE value=\"Frontend directory/folder creation\" />\r\n    <MESSAGE value=\"Backend first commit\" />\r\n    <MESSAGE value=\"README update and SQL file added\" />\r\n    <MESSAGE value=\"README update and Reports added\" />\r\n    <MESSAGE value=\"Changes is database structure and booking operation added (notification trigger not included)\" />\r\n    <MESSAGE value=\"Get Teams Asking For Match updated\" />\r\n    <MESSAGE value=\"Timeslot table Frontend and Backend connection\" />\r\n    <MESSAGE value=\"Team Information Page added\" />\r\n    <MESSAGE value=\"Find Opponent Backend implementation and Booking correction\" />\r\n    <MESSAGE value=\"-\" />\r\n    <MESSAGE value=\"Correction (PopUp)\" />\r\n    <MESSAGE value=\"Booking connection done\" />\r\n    <MESSAGE value=\"Asking for opponent and not asking for opponent done\" />\r\n    <MESSAGE value=\"Admin panel Backend\" />\r\n    <MESSAGE value=\"DB Event added. emailService updated. backend fix (not tested)\" />\r\n    <MESSAGE value=\"MyTeam button fix\" />\r\n    <MESSAGE value=\"Trigger added for ranking\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Trigger added for ranking\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/CNG495_CloudComputing$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1735163420959\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Backend\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5a9865f7ddf5188ede93dcd0cdf4cd17206e99cc)
+++ b/.idea/workspace.xml	(date 1735172272482)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="65369a6a-bed1-458d-be00-143af3760ec2" name="Changes" comment="Trigger added for ranking">
+    <list default="true" id="65369a6a-bed1-458d-be00-143af3760ec2" name="Changes" comment="Looking for opponents fix">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Backend/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/app.py" afterDir="false" />
     </list>
@@ -109,7 +109,7 @@
       <workItem from="1734980009707" duration="3123000" />
       <workItem from="1735040775010" duration="24543000" />
       <workItem from="1735134543461" duration="1959000" />
-      <workItem from="1735159138607" duration="7604000" />
+      <workItem from="1735159138607" duration="10297000" />
     </task>
     <task id="LOCAL-00001" summary="Connection codes for Flask connection">
       <option name="closed" value="true" />
@@ -263,7 +263,15 @@
       <option name="project" value="LOCAL" />
       <updated>1735166986675</updated>
     </task>
-    <option name="localTasksCounter" value="20" />
+    <task id="LOCAL-00020" summary="Looking for opponents fix">
+      <option name="closed" value="true" />
+      <created>1735168491014</created>
+      <option name="number" value="00020" />
+      <option name="presentableId" value="LOCAL-00020" />
+      <option name="project" value="LOCAL" />
+      <updated>1735168491014</updated>
+    </task>
+    <option name="localTasksCounter" value="21" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -327,7 +335,8 @@
     <MESSAGE value="DB Event added. emailService updated. backend fix (not tested)" />
     <MESSAGE value="MyTeam button fix" />
     <MESSAGE value="Trigger added for ranking" />
-    <option name="LAST_COMMIT_MESSAGE" value="Trigger added for ranking" />
+    <MESSAGE value="Looking for opponents fix" />
+    <option name="LAST_COMMIT_MESSAGE" value="Looking for opponents fix" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/CNG495_CloudComputing$app.coverage" NAME="app Coverage Results" MODIFIED="1735163420959" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/Backend" />
